Bubble Sort

#include <iostream>
 
void PrintArray(int *array, int n) {
  for (int i = 0; i < n; ++i)
    std::cout << array[i] << " " << std::flush;
  std::cout << std::endl;
}
 
void BubbleSort(int *array, int n) {
  bool swapped = true;
  int j = 0;
  int temp;
 
  while (swapped) {
    swapped = false;
    j++;
    for (int i = 0; i < n - j; ++i) {
      if (array[i] > array[i + 1]) {
        temp = array[i];
        array[i] = array[i + 1];
        array[i + 1] = temp;
        swapped = true;
      }
    }
  }
}
 
int main() {
  int array[] = {94, 42, 50, 95, 333, 65, 54, 456, 1, 1234};
  int n = sizeof(array)/sizeof(array[0]);
 
  std::cout << "Before Bubble Sort :" << std::endl;
  PrintArray(array, n);
 
  BubbleSort(array, n);
 
  std::cout << "After Bubble Sort :" << std::endl;
  PrintArray(array, n);
  return (0);
}

Selection Sort


#include <iostream>
 
void PrintArray(int *array, int n) {
  for (int i = 0; i < n; ++i)
    std::cout << array[i] << " " << std::flush;
  std::cout << std::endl;
}
 
inline void Swap(int &a, int &b){
  int k = a;
  a = b;
  b = k;
}
 
void SelectionSort(int arr[], int arr_size){
  for(int i = 0; i < arr_size - 1; ++i){
    int min = i;
    for(int j = i+1; j < arr_size; ++j)
      if(arr[j] < arr[min])
        min = j;
    Swap(arr[min], arr[i]);
  }
}
 
int main() {
  int array[] = {94, 42, 50, 95, 333, 65, 54, 456, 1, 1234};
  int n = sizeof(array)/sizeof(array[0]);
 
  std::cout << "Before Selection Sort :" << std::endl;
  PrintArray(array, n);
 
  SelectionSort(array, n);
 
  std::cout << "After Selection Sort :" << std::endl;
  PrintArray(array, n);
  return (0);
}



Insertion sort

Begin at position 1 and move each element to the left until it is in the correct place
At iteration i, the leftmost i elements are in sorted order.
Sorts list by moving each element to its proper place.
Efficient for sorting small numbers.
In place sort: Takes an array A[0..n-1] (sequence of n elements) and arranges them in place, so that it is sorted.
Attempts to improve high selection sort key comparisons.
